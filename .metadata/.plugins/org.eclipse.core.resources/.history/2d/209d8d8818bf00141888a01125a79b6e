/**
 * 
 */
package com.mobileclient.activity;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.GoogleAuthException;
import com.google.android.gms.auth.GoogleAuthUtil;
import com.google.android.gms.auth.UserRecoverableAuthException;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesUtil;
import com.google.android.gms.common.Scopes;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.plus.Plus;
import com.google.android.gms.plus.model.people.Person;
import com.google.common.io.CharStreams;

/**
 * @author zl
 *
 */
public class GoogleApiActivity extends Activity implements OnClickListener,
ConnectionCallbacks, OnConnectionFailedListener{

	private static final int RC_SIGN_IN = 0;

	
	public static final String SCOPES = "https://www.googleapis.com/auth/plus.login "
		    + "https://www.googleapis.com/auth/drive.file";
	
	// Logcat tag
    private static final String TAG = "GoogleApiActivity";
 
    // Profile pic image size in pixels
    private static final int PROFILE_PIC_SIZE = 400;
	protected static final int REQUEST_CODE_TOKEN_AUTH = 0;
 
    // Google client to interact with Google API
    private GoogleApiClient mGoogleApiClient;
 
    /**
     * A flag indicating that a PendingIntent is in progress and prevents us
     * from starting further intents.
     */
    private boolean mIntentInProgress;
 
    private boolean mSignInClicked;
 
    private ConnectionResult mConnectionResult;
 
    private SignInButton btnSignIn;
    private Button btnSignOut, btnRevokeAccess;
    private ImageView imgProfilePic;
    private TextView txtName, txtEmail,txtToken;
    private LinearLayout llProfileLayout;
 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.google_api);
 
        btnSignIn = (SignInButton) findViewById(R.id.sign_in_button);
        btnSignOut = (Button) findViewById(R.id.btn_sign_out);
        btnRevokeAccess = (Button) findViewById(R.id.btn_revoke_access);
        imgProfilePic = (ImageView) findViewById(R.id.imgProfilePic);
        txtName = (TextView) findViewById(R.id.txtName);
        txtEmail = (TextView) findViewById(R.id.txtEmail);
        txtToken = (TextView) findViewById(R.id.txtToken);
        llProfileLayout = (LinearLayout) findViewById(R.id.llProfile);
 
        // Button click listeners
        btnSignIn.setOnClickListener(this);
        btnSignOut.setOnClickListener(this);
        btnRevokeAccess.setOnClickListener(this);
 
        mGoogleApiClient = new GoogleApiClient.Builder(this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this).addApi(Plus.API, null)
                .addScope(Plus.SCOPE_PLUS_LOGIN).build();
    }
 
    protected void onStart() {
        super.onStart();
        mGoogleApiClient.connect();
        
    }
 
    protected void onStop() {
        super.onStop();
        if (mGoogleApiClient.isConnected()) {
            mGoogleApiClient.disconnect();
        }
    }
 
    /**
     * Method to resolve any signin errors
     * */
    private void resolveSignInError() {
        if (mConnectionResult.hasResolution()) {
            try {
                mIntentInProgress = true;
                mConnectionResult.startResolutionForResult(this, RC_SIGN_IN);
            } catch (SendIntentException e) {
                mIntentInProgress = false;
                mGoogleApiClient.connect();
            }
        }
    }
 
    @Override
    public void onConnectionFailed(ConnectionResult result) {
        if (!result.hasResolution()) {
            GooglePlayServicesUtil.getErrorDialog(result.getErrorCode(), this,
                    0).show();
            return;
        }
 
        if (!mIntentInProgress) {
            // Store the ConnectionResult for later usage
            mConnectionResult = result;
 
            if (mSignInClicked) {
                // The user has already clicked 'sign-in' so we attempt to
                // resolve all
                // errors until the user is signed in, or they cancel.
                resolveSignInError();
            }
        }
 
    }
 
    @Override
    protected void onActivityResult(int requestCode, int responseCode,
            Intent intent) {
        if (requestCode == RC_SIGN_IN) {
            if (responseCode != RESULT_OK) {
                mSignInClicked = false;
            }
            mIntentInProgress = false;
            if (!mGoogleApiClient.isConnecting()) {
                mGoogleApiClient.connect();
            }
        }
    }
 
    
    /**
     * 连接回调
     */
    @Override
    public void onConnected(Bundle arg0) {
        mSignInClicked = false;
        Toast.makeText(this, "User is connected!", Toast.LENGTH_LONG).show();
 
        // Get user's information
        getProfileInformation();
 
        // Update the UI after signin
        updateUI(true);
 
    }
 
    /**
     * Updating the UI, showing/hiding buttons and profile layout
     * */
    private void updateUI(boolean isSignedIn) {
        if (isSignedIn) {
            btnSignIn.setVisibility(View.GONE);
            btnSignOut.setVisibility(View.VISIBLE);
            btnRevokeAccess.setVisibility(View.VISIBLE);
            llProfileLayout.setVisibility(View.VISIBLE);
        } else {
            btnSignIn.setVisibility(View.VISIBLE);
            btnSignOut.setVisibility(View.GONE);
            btnRevokeAccess.setVisibility(View.GONE);
            llProfileLayout.setVisibility(View.GONE);
        }
    }
 
    /**
     * Fetching user's information name, email, profile pic
     * */
    private void getProfileInformation() {
        try {
            if (Plus.PeopleApi.getCurrentPerson(mGoogleApiClient) != null) {
                Person currentPerson = Plus.PeopleApi
                        .getCurrentPerson(mGoogleApiClient);
                String personName = currentPerson.getDisplayName();
                String personPhotoUrl = currentPerson.getImage().getUrl();
                String personGooglePlusProfile = currentPerson.getUrl();
                final String accountName = Plus.AccountApi.getAccountName(mGoogleApiClient);
                
                String googleAccessToken="";
                
                AsyncTask<Void, Void, String> task = new AsyncTask<Void, Void, String>() {
                    @Override
                    protected String doInBackground(Void... params) {
                        String token = null;

                        try {
                            token = GoogleAuthUtil.getToken(
                                    GoogleApiActivity.this,
                                    accountName,
                                    "oauth2:" + SCOPES);
                            
                            String sAccessToken = GoogleAuthUtil.getToken(GoogleApiActivity.this, accountName,
                                    "oauth2:" + Scopes.PLUS_LOGIN + " https://www.googleapis.com/auth/userinfo.email");
                            
                            System.out.println("token:"+token);
                            System.out.println("sAccessToken:"+sAccessToken);
                        } catch (IOException transientEx) {
                            // Network or server error, try later
                            Log.e(TAG, transientEx.toString());
                        } catch (UserRecoverableAuthException e) {
                            // Recover (with e.getIntent())
                            Log.e(TAG, e.toString());
                            Intent recover = e.getIntent();
                            startActivityForResult(recover, REQUEST_CODE_TOKEN_AUTH);
                        } catch (GoogleAuthException authEx) {
                            // The call is not ever expected to succeed
                            // assuming you have already verified that 
                            // Google Play services is installed.
                            Log.e(TAG, authEx.toString());
                        }

                        return token;
                    }

                    @Override
                    protected void onPostExecute(String token) {
                        //Log.i(TAG, "Access token:" + token);
                        txtToken.setText(token);
                        // Update the UI after signin
                        updateUI(true);
                        
                        //校验账户和token
                        checkAccountAndToken(token);
                    }

                };
                
                //access token
                task.execute();
                                
                
                Log.i(TAG, "Name: " + personName + ", plusProfile: "
                        + personGooglePlusProfile + ", email: " + accountName
                        + ", Image: " + personPhotoUrl +",token:"+googleAccessToken+",accessToken:"+googleAccessToken);
 
                txtName.setText(personName);
                txtEmail.setText(accountName);
                
 
                // by default the profile url gives 50x50 px image only
                // we can replace the value with whatever dimension we want by
                // replacing sz=X
                personPhotoUrl = personPhotoUrl.substring(0,
                        personPhotoUrl.length() - 2)
                        + PROFILE_PIC_SIZE;
 
                new LoadProfileImage(imgProfilePic).execute(personPhotoUrl);
 
            } else {
                Toast.makeText(getApplicationContext(),
                        "Person information is null", Toast.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
 
    @Override
    public void onConnectionSuspended(int arg0) {
        mGoogleApiClient.connect();
        updateUI(false);
    }
 
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
 
    /**
     * Button on click listener
     * */
    @Override
    public void onClick(View v) {
        switch (v.getId()) {
        case R.id.sign_in_button:
            // Signin button clicked
            signInWithGplus();
            break;
        case R.id.btn_sign_out:
            // Signout button clicked
            signOutFromGplus();
            break;
        case R.id.btn_revoke_access:
            // Revoke access button clicked
            revokeGplusAccess();
            break;
        }
    }
 
    /**
     * Sign-in into google
     * */
    private void signInWithGplus() {
        if (!mGoogleApiClient.isConnecting()) {
            mSignInClicked = true;
            resolveSignInError();
        }
    }
 
    /**
     * Sign-out from google
     * */
    private void signOutFromGplus() {
        if (mGoogleApiClient.isConnected()) {
            Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);
            mGoogleApiClient.disconnect();
            mGoogleApiClient.connect();
            
            updateUI(false);
        }
    }
 
    /**
     * Revoking access from google
     * */
    private void revokeGplusAccess() {
        if (mGoogleApiClient.isConnected()) {
            Plus.AccountApi.clearDefaultAccount(mGoogleApiClient);
            Plus.AccountApi.revokeAccessAndDisconnect(mGoogleApiClient)
                    .setResultCallback(new ResultCallback<Status>() {
                        @Override
                        public void onResult(Status arg0) {
                            Log.e(TAG, "User access revoked!");
                            mGoogleApiClient.connect();
                            updateUI(false);
                        }
 
                    });
        }
    }
 
    /**
     * Background Async task to load user profile picture from url
     * */
    private class LoadProfileImage extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;
 
        public LoadProfileImage(ImageView bmImage) {
            this.bmImage = bmImage;
        }
 
        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }
 
        protected void onPostExecute(Bitmap result) {
            bmImage.setImageBitmap(result);
        }
    }


    /**
     * 校验当前账户和token
     * @return
     */
    private boolean checkAccountAndToken(String token){
    	final String account = Plus.AccountApi.getAccountName(mGoogleApiClient);

    	
    	
        AsyncTask<Void, Void, String> task = new AsyncTask<Void, Void, String>() {

            @Override
            protected String doInBackground(Void... params) {
                HttpURLConnection urlConnection = null;

                try {
                    URL url = new URL("https://www.googleapis.com/oauth2/v1/userinfo");
//                    String sAccessToken = GoogleAuthUtil.getToken(GoogleApiActivity.this, account,
//                        "oauth2:" + Scopes.PLUS_LOGIN + " https://www.googleapis.com/auth/userinfo.email");
                    System.out.println("get user info :");
                    System.out.println("sAccessToken :"+params[0]);
                    
                    urlConnection = (HttpURLConnection) url.openConnection();
                    urlConnection.setRequestProperty("Authorization", "Bearer " + params[0]);
                    
                    String content = CharStreams.toString(new InputStreamReader(urlConnection.getInputStream(),"UTF-8"));
                    
                    if (!TextUtils.isEmpty(content)) {
                    	System.out.println("content:"+content);
                        return  new JSONObject(content).getString("email");
                    }
                } catch (Exception e) {
                    // 处理错误
                    // e.printStackTrace(); // 调试过程中在必要时取消备注。
                } finally {
                    if (urlConnection != null) {
                        urlConnection.disconnect();
                    }
                }

                return null;
            }

            @Override
            protected void onPostExecute(String info) {
                // 存储或使用用户的电子邮件地址
            }
        };
        
        
        
        task.execute();
        
        return false;
    }
    
    
    public class AuthSyncTask extends AsyncTask<String, Integer, String>{

		@Override
		protected String doInBackground(String... params) {
			HttpURLConnection urlConnection = null;

            try {
                URL url = new URL("https://www.googleapis.com/oauth2/v1/userinfo");
//                String sAccessToken = GoogleAuthUtil.getToken(GoogleApiActivity.this, account,
//                    "oauth2:" + Scopes.PLUS_LOGIN + " https://www.googleapis.com/auth/userinfo.email");
                System.out.println("get user info :");
                System.out.println("sAccessToken :"+params[0]);
                
                urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setRequestProperty("Authorization", "Bearer " + params[0]);
                
                String content = CharStreams.toString(new InputStreamReader(urlConnection.getInputStream(),"UTF-8"));
                
                if (!TextUtils.isEmpty(content)) {
                	System.out.println("content:"+content);
                    return  new JSONObject(content).getString("email");
                }
            } catch (Exception e) {
                // 处理错误
                // e.printStackTrace(); // 调试过程中在必要时取消备注。
            } finally {
                if (urlConnection != null) {
                    urlConnection.disconnect();
                }
            }

            return null;
		}
		
		@Override
        protected void onPostExecute(String info) {
            // 存储或使用用户的电子邮件地址
        }
    	
    }
}
